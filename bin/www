#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

var debug = require('debug')('portal:www');
var http = require('http');
var request = require('request');
var fs = require('fs');
var path = require('path');

//var envReader = require('portal-env');
var wicked = require('wicked-sdk');

var utils = require('../routes/utils');
var portalGlobals = require('../portalGlobals');

var app = require('../app');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Wait for Portal API to be available
debug('Waiting for API to be available.');
app.initState = 'Waiting for API...';
wicked.initialize({
    userAgentName: 'wicked.portal',
    userAgentVersion: utils.getVersion(),
    doNotPollConfigHash: true
}, function (err) {
    if (err) {
        console.error(err);
        throw Error('Could not retrieve globals from API! API not running?');
    }

    let apiUrl = wicked.getInternalApiUrl();
    if (apiUrl.endsWith('/')) // Strip trailing slash
        apiUrl = apiUrl.substring(0, apiUrl.length - 1);
    app.set('api_url', apiUrl);

    debug('API is responding. Finishing initialization.');
    app.initState = 'Finishing initialization...';

    portalGlobals.glob = wicked.getGlobals();

    app.portalGlobals = wicked.getGlobals();
    app.portalGlobals.buildDate = getBuildDate();

    app.initialize(function () {
        app.initialized = true;
        app.initState = 'Initialized';
    });
});

function getBuildDate() {
    debug('getBuildDate()');
    var buildDatePath = path.join(__dirname, '..', 'build_date');
    debug('Looking for build date file at: ' + buildDatePath);
    if (!fs.existsSync(buildDatePath))
        return "(no build date found)";
    return fs.readFileSync(buildDatePath, 'utf8');
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
